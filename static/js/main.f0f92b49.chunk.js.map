{"version":3,"sources":["images/rule-goal-4.jpg","images/rule-goal-5.jpg","images/codebreaker-logo.svg","images/rule-setup-4.jpg","images/rule-setup-5.jpg","images/rule-setup-reveal.jpg","images/rule-turn.jpg","images/rule-question.jpg","images/rule-example-1.jpg","images/rule-example-2.jpg","images/rule-example-3.jpg","images/rule-example-4.jpg","serviceWorker.js","utils/constants.js","utils/index.js","utils/cards.js","engine.js","useGlobalState.js","components/Number.jsx","components/Code.jsx","components/Header.jsx","utils/useInterval.jsx","components/PlayerCodeModal.jsx","components/Question.jsx","components/Game.jsx","components/Home.jsx","components/Rules.jsx","components/App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","SCREENS","COLORS","NUMBERS","COLOR_CODES","B","G","W","INDEX_LETTER","0","1","2","3","4","INDEX_QUESTION_LETTER","5","NUMBER_OF_DIGITS","shuffle","list","result","sort","Math","random","splitList","chunks","chunkIndex","i","length","undefined","push","id","question","this","playerCount","code","hands","questions","activeQuestions","usedQuestions","shuffledNumbers","playerHands","pop","reduce","acc","hand","index","player","CARDS","state","questionID","questionsLeft","initialState","game","gameEngine","screen","selectedQuestion","playerModal","useGlobalState","createGlobalState","Number","numberCode","position","isHidden","numObj","split","numberString","colorLetter","number","color","className","decodeNumber","Code","map","key","Header","setScreen","icon","AppBar","Button","onClick","startIcon","reset","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Transition","React","forwardRef","props","ref","Slide","direction","PlayerCodeModal","activePlayerModal","setActivePlayerModal","useState","isRevealed","setIsRevealed","revealCountdown","setRevealCountdown","isRevealCountdownRunning","setIsRevealCountdownRunning","hideCountdown","setHideCountdown","isHideCountdownRunning","setIsHideCountdownRunning","activeCode","titlePrefix","useInferval","newCountdown","handleClose","completed","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","LinearProgress","variant","value","DialogActions","Question","setSelectedQuestion","isSelectedClassModifier","event","target","Game","setGame","revealCode","playerNumber","console","log","ButtonGroup","aria-label","Object","values","entry","confirmQuestion","Home","players","setPlayers","src","logo","alt","FormGroup","FormControl","component","FormLabel","style","RadioGroup","name","onChange","FormControlLabel","control","Radio","label","disabled","setup","steps","RuleGoal","ruleSet","digits","imgSrc","ruleGoal4Img","ruleGoal5Img","RuleSetup","ruleSetup4Img","ruleSetup5Img","ruleSetupRevealImg","RuleTurn","ruleTurnImg","RuleQuestion","ruleQuestionImg","RuleAnswering","ruleExample1Img","ruleExample2Img","ruleExample3Img","ruleExample4Img","RuleGuess","RuleEndGame","Rules","setRuleSet","ruleStep","setRuleStep","ruleComponent","Goal","Setup","Turn","Answering","Guess","ruleComponents","Stepper","activeStep","alternativeLabel","Step","StepLabel","prevActiveStep","ScreenComponents","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0f92b49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rule-goal-4.fd7a6494.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-goal-5.dd6c7c31.jpg\";","module.exports = __webpack_public_path__ + \"static/media/codebreaker-logo.619b899a.svg\";","module.exports = __webpack_public_path__ + \"static/media/rule-setup-4.5dd2fa92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-setup-5.3ea055bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-setup-reveal.f55b24cb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-turn.2a46b951.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-question.6c34c973.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-example-1.8a19287f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-example-2.c7066c3e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-example-3.5215b145.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rule-example-4.02f95d58.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const SCREENS = {\n  HOME: 'HOME',\n  GAME: 'GAME',\n  RULES: 'RULES',\n};\n\nexport const COLORS = {\n  PRIMARY: '#23941b',\n  SECONDARY: '#8c1b94',\n};\n\nexport const NUMBERS = [\n  '0B',\n  '0W',\n  '1B',\n  '1W',\n  '2B',\n  '2W',\n  '3B',\n  '3W',\n  '4B',\n  '4W',\n  '5G',\n  '5G',\n  '6B',\n  '6W',\n  '7B',\n  '7W',\n  '8B',\n  '8W',\n  '9B',\n  '9W',\n];\n\nexport const COLOR_CODES = {\n  B: 'black',\n  G: 'green',\n  W: 'white',\n};\n\nexport const INDEX_LETTER = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  3: 'd',\n  4: 'e',\n};\n\nexport const INDEX_QUESTION_LETTER = {\n  0: 'A',\n  1: 'B',\n  2: 'C',\n  3: 'D',\n  4: 'E',\n  5: 'F',\n};\n\nexport const NUMBER_OF_DIGITS = {\n  2: 5,\n  3: 5,\n  4: 4,\n};\n","import { COLOR_CODES } from './constants';\n/**\n * Shuffles list returning a new shuffled instance\n * @param {array} list\n * @returns {array}\n */\nexport const shuffle = (list) => {\n  const result = [...list];\n  result.sort(() => Math.random() - 0.5);\n  return result;\n};\n\n/**\n * Splits a list of elements into n number of chunks with equal number of elements\n * @param {array} list\n * @param {number} chunks how many chuncks it should be splitted to\n * @returns {array} array of arrays of items\n */\nexport const splitList = (list, chunks = 2) => {\n  const result = [];\n  let chunkIndex = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (result[chunkIndex] === undefined) {\n      result[chunkIndex] = [];\n    }\n    result[chunkIndex].push(list[i]);\n    chunkIndex = chunkIndex === chunks - 1 ? 0 : chunkIndex + 1;\n  }\n\n  return result;\n};\n\n/**\n * Transform the number code into an object\n * @param {string} numberCode\n */\nexport const decodeNumber = (numberCode) => {\n  const [numberString, colorLetter] = numberCode.split('');\n\n  return {\n    number: +numberString,\n    color: COLOR_CODES[colorLetter],\n    className: `number number--${COLOR_CODES[colorLetter]}`,\n  };\n};\n","export default [\n  {\n    id: 'q1',\n    question: 'How many odd tiles do you have?',\n  },\n  {\n    id: 'q2',\n    question: 'Which neighboring tiles have consecutive numbers?',\n  },\n  {\n    id: 'q3',\n    question: 'Where are your #0 tiles?',\n  },\n  {\n    id: 'q4',\n    question: 'How many of your tiles have a white number?',\n  },\n  {\n    id: 'q5',\n    question: 'What is the sum of your white numbers?',\n  },\n  {\n    id: 'q6',\n    question: 'How many of your tiles have the same number?',\n  },\n  {\n    id: 'q7',\n    question: 'How many even tiles do you have? (0 is considered an even number)',\n  },\n  {\n    id: 'q8',\n    question: 'What is the sum of your 3 left-most tiles?',\n  },\n  {\n    id: 'q9',\n    question: 'What is the sum of your central tiles? (3 or 2 center tiles)',\n  },\n  {\n    id: 'q10',\n    question: 'What is the sum of your 3 right-most tiles?',\n  },\n  {\n    id: 'q11',\n    question: 'Where are your #1 or #2 tiles? (choose one number when asking the question)',\n  },\n  {\n    id: 'q12',\n    question: 'Where are your #3 or #4 tiles? (choose one number when asking the question)',\n  },\n  {\n    id: 'q13',\n    question: 'Where are your #6 or #7 tiles? (choose one number when asking the question)',\n  },\n  {\n    id: 'q14',\n    question: 'Where are your #8 or #9 tiles? (choose one number when asking the question)',\n  },\n  {\n    id: 'q15',\n    question: 'Which neighboring tiles have the same color?',\n  },\n  {\n    id: 'q16',\n    question: 'Where are your #5 tiles?',\n  },\n  {\n    id: 'q17',\n    question: 'What is the sum of your black numbers?',\n  },\n  {\n    id: 'q18',\n    question: 'How many of your tiles have a black number?',\n  },\n  {\n    id: 'q19',\n    question: 'What is the different between your highest and lowest number?',\n  },\n  {\n    id: 'q20',\n    question: 'Is your C tile greater than 4?',\n  },\n  {\n    id: 'q21',\n    question: 'What is the sum of your tiles?',\n  },\n];\n","import { shuffle, splitList } from './utils';\nimport CARDS from './utils/cards';\nimport { NUMBERS } from './utils/constants';\n\nclass GameEngine {\n  constructor() {\n    this.playerCount = 0;\n    this.code = null;\n    this.hands = {};\n    this.questions = [];\n    this.activeQuestions = [];\n    this.usedQuestions = [];\n  }\n\n  get state() {\n    return {\n      code: this.code,\n      hands: this.hands,\n      questionsLeft: this.questionsLeft,\n      activeQuestions: this.activeQuestions,\n      playerCount: this.playerCount,\n    };\n  }\n\n  get questionsLeft() {\n    return this.questions.length + this.activeQuestions.length;\n  }\n\n  setup(playerCount) {\n    this.playerCount = playerCount;\n\n    const shuffledNumbers = shuffle(NUMBERS);\n\n    let playerHands = null;\n\n    if (playerCount < 4) {\n      playerHands = splitList(shuffledNumbers, 4);\n    } else {\n      playerHands = splitList(shuffledNumbers, 5);\n    }\n\n    if (playerCount > 2) {\n      this.code = playerHands.pop().sort();\n    }\n\n    this.hands = playerHands.reduce((acc, hand, index) => {\n      if (index < playerCount) {\n        acc[index + 1] = {\n          player: index + 1,\n          hand: hand.sort(),\n        };\n      }\n      return acc;\n    }, {});\n\n    this.questions = shuffle(CARDS);\n\n    while (this.activeQuestions.length < 6) {\n      this.activeQuestions.push(this.questions.pop());\n    }\n\n    return this.state;\n  }\n\n  confirmQuestion(questionID) {\n    this.activeQuestions = this.activeQuestions.reduce((acc, question) => {\n      if (questionID === question.id) {\n        this.usedQuestions.push(question);\n        if (this.questions.length > 0) {\n          acc.push(this.questions.pop());\n        }\n      } else {\n        acc.push(question);\n      }\n\n      return acc;\n    }, []);\n\n    return this.state;\n  }\n\n  reset() {\n    this.playerCount = 0;\n    this.code = null;\n    this.hands = {};\n    this.questions = [];\n    this.activeQuestions = [];\n    this.usedQuestions = [];\n  }\n}\n\nexport default new GameEngine();\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport gameEngine from './engine';\n\nimport { SCREENS } from './utils/constants';\n\nconst initialState = {\n  game: gameEngine.state,\n  screen: SCREENS.HOME,\n  selectedQuestion: null,\n  playerModal: null,\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import React from 'react';\n\nimport { decodeNumber } from '../utils';\nimport { INDEX_LETTER } from '../utils/constants';\n\nconst Number = ({ numberCode, position, isHidden = true }) => {\n  const numObj = decodeNumber(numberCode);\n\n  return (\n    <div className=\"number-tile\">\n      <span className=\"letter\">{INDEX_LETTER[position]}</span>\n      {isHidden ? (\n        <span className=\"number number--hidden\">?</span>\n      ) : (\n        <span className={numObj.className}>{numObj.number}</span>\n      )}\n    </div>\n  );\n};\n\nexport default Number;\n","import React from 'react';\n\nimport Number from './Number';\n\nconst Code = ({ code, isHidden = true }) => {\n  return (\n    <div className=\"code-result\">\n      {code.map((numberCode, index) => (\n        <Number key={numberCode} numberCode={numberCode} position={index} isHidden={isHidden} />\n      ))}\n    </div>\n  );\n};\n\nexport default Code;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport GamesIcon from '@material-ui/icons/Games';\nimport HistoryIcon from '@material-ui/icons/History';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nconst Header = () => {\n  // Global States\n  const [screen, setScreen] = useGlobalState('screen');\n\n  const handleReset = () => {\n    gameEngine.reset();\n    setScreen(SCREENS.HOME);\n  };\n\n  const handleLeftButton = () => {\n    setScreen(screen === SCREENS.RULES ? SCREENS.GAME : SCREENS.RULES);\n  };\n\n  const icon = screen === SCREENS.RULES ? <GamesIcon /> : <MenuBookIcon />;\n\n  return (\n    <AppBar position=\"static\" className=\"header\">\n      <Button className=\"header__btn\" onClick={handleLeftButton} startIcon={icon}>\n        {screen === SCREENS.RULES ? 'Game' : 'Rules'}\n      </Button>\n      <h3>Codebreaker</h3>\n      <Button className=\"header__btn\" onClick={handleReset} startIcon={<HistoryIcon />}>\n        Reset\n      </Button>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { Fragment, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport useGlobalState from '../useGlobalState';\nimport useInferval from '../utils/useInterval';\n\nimport Code from './Code';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst PlayerCodeModal = () => {\n  // Global state\n  const [game] = useGlobalState('game');\n  const [activePlayerModal, setActivePlayerModal] = useGlobalState('playerModal');\n  // Local state\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [revealCountdown, setRevealCountdown] = useState(3);\n  const [isRevealCountdownRunning, setIsRevealCountdownRunning] = useState(true);\n  const [hideCountdown, setHideCountdown] = useState(20);\n  const [isHideCountdownRunning, setIsHideCountdownRunning] = useState(false);\n\n  const activeCode = activePlayerModal === 'code' ? game.code : game.hands[activePlayerModal].hand;\n\n  const titlePrefix =\n    activePlayerModal === 'code' ? 'Code Result' : `Player ${activePlayerModal} Code`;\n\n  useInferval(\n    () => {\n      const newCountdown = revealCountdown - 1;\n      if (newCountdown >= 0) {\n        setRevealCountdown(newCountdown);\n      } else {\n        setIsRevealed(true);\n        setIsRevealCountdownRunning(false);\n        setIsHideCountdownRunning(true);\n      }\n    },\n    isRevealCountdownRunning ? 1000 : null\n  );\n\n  useInferval(\n    () => {\n      const newCountdown = hideCountdown - 1;\n      if (newCountdown >= 0) {\n        setHideCountdown(newCountdown);\n      } else {\n        handleClose();\n      }\n    },\n    isHideCountdownRunning ? 1000 : null\n  );\n\n  const handleClose = () => {\n    setIsRevealCountdownRunning(false);\n    setIsHideCountdownRunning(false);\n    setActivePlayerModal(null);\n  };\n\n  const completed = (100 * hideCountdown) / 20;\n\n  return (\n    <Dialog\n      open={Boolean(activePlayerModal)}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle>\n        {isRevealed ? titlePrefix : `${titlePrefix} will be revealed in...`}\n      </DialogTitle>\n      <DialogContent>\n        {isRevealed ? (\n          <Fragment>\n            <Code code={activeCode} isHidden={!isRevealed} />\n            <LinearProgress variant=\"determinate\" value={completed} />\n          </Fragment>\n        ) : (\n          <div className=\"countdown\">{revealCountdown}</div>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          {isRevealed ? `Auto-close in ${hideCountdown}` : 'Close'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default PlayerCodeModal;\n","import React from 'react';\n\nimport useGlobalState from '../useGlobalState';\n\nimport { INDEX_QUESTION_LETTER } from '../utils/constants';\n\nconst Question = ({ question, position }) => {\n  // Global States\n  const [selectedQuestion, setSelectedQuestion] = useGlobalState('selectedQuestion');\n\n  const isSelectedClassModifier = selectedQuestion === question.id ? 'question-card--selected' : '';\n\n  const handleSelectQuestion = (event) => {\n    const questionID = event.target.id;\n    setSelectedQuestion(selectedQuestion === questionID ? null : questionID);\n  };\n\n  return (\n    <button\n      className={`btn question-card ${isSelectedClassModifier}`}\n      id={question.id}\n      onClick={handleSelectQuestion}\n    >\n      <span className=\"question-letter\">{INDEX_QUESTION_LETTER[position]}</span>\n      {question.question}\n    </button>\n  );\n};\n\nexport default Question;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport Code from './Code';\nimport Header from './Header';\nimport PlayerCodeModal from './PlayerCodeModal';\nimport Question from './Question';\n\nconst Game = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [selectedQuestion, setSelectedQuestion] = useGlobalState('selectedQuestion');\n  const [activePlayerModal, setActivePlayerModal] = useGlobalState('playerModal');\n\n  const revealCode = (playerNumber) => {\n    setActivePlayerModal(playerNumber);\n  };\n\n  const handleConfirmQuestion = () => {\n    setGame(gameEngine.confirmQuestion(selectedQuestion));\n    setSelectedQuestion(null);\n  };\n\n  console.log(game);\n\n  return (\n    <div className=\"game\">\n      <Header />\n      <div className=\"content\">\n        <div className=\"code-reveal\">\n          <p>Reveal each code for each player to take note while others close their eyes.</p>\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            {Object.values(game.hands).map((entry) => (\n              <Button\n                className=\"btn btn--group\"\n                key={entry.player}\n                onClick={() => revealCode(entry.player)}\n              >\n                Player {entry.player}\n              </Button>\n            ))}\n          </ButtonGroup>\n          {activePlayerModal && <PlayerCodeModal />}\n        </div>\n        <h3>On your turn:</h3>\n        <h2>\n          Ask a Question <span className=\"text-green\">OR</span> Guess the Code\n        </h2>\n        {game.code && (\n          <button className=\"btn btn--invisible\" onClick={() => revealCode('code')}>\n            <Code code={game.code} isHidden />\n          </button>\n        )}\n\n        <p>Questions Left: {game.questionsLeft} (including the visible ones)</p>\n        <div className=\"questions-list\">\n          {game.activeQuestions.map((question, index) => (\n            <Question key={question.id} question={question} position={index} />\n          ))}\n        </div>\n\n        {selectedQuestion && (\n          <Button className=\"btn btn--solid\" variant=\"contained\" onClick={handleConfirmQuestion}>\n            Confirm Question\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nimport logo from '../images/codebreaker-logo.svg';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { COLORS, SCREENS } from '../utils/constants';\n\nconst Home = () => {\n  // Global States\n  const [, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n  // Local States\n  const [players, setPlayers] = useState(3);\n\n  const handleCreateGame = () => {\n    setGame(gameEngine.setup(players));\n    setScreen(SCREENS.RULES);\n  };\n\n  return (\n    <div className=\"home\">\n      <img className=\"logo\" src={logo} alt=\"Carto logo\" />\n      <h1>Carto</h1>\n\n      <FormGroup>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\" style={{ color: COLORS.PRIMARY }}>\n            Player Count\n          </FormLabel>\n          <RadioGroup\n            aria-label=\"mode\"\n            name=\"mode\"\n            value={players}\n            onChange={(event) => setPlayers(+event.target.value)}\n          >\n            <FormControlLabel value={1} control={<Radio />} label=\"Solo\" disabled />\n            <FormControlLabel value={2} control={<Radio />} label=\"2 players\" />\n            <FormControlLabel value={3} control={<Radio />} label=\"3 players\" />\n            <FormControlLabel value={4} control={<Radio />} label=\"4 players\" />\n          </RadioGroup>\n        </FormControl>\n      </FormGroup>\n\n      <div className=\"home__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleCreateGame}>\n          Start Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Fragment, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\n// Images\nimport ruleGoal4Img from '../images/rule-goal-4.jpg';\nimport ruleGoal5Img from '../images/rule-goal-5.jpg';\nimport ruleSetup4Img from '../images/rule-setup-4.jpg';\nimport ruleSetup5Img from '../images/rule-setup-5.jpg';\nimport ruleSetupRevealImg from '../images/rule-setup-reveal.jpg';\nimport ruleTurnImg from '../images/rule-turn.jpg';\nimport ruleQuestionImg from '../images/rule-question.jpg';\nimport ruleExample1Img from '../images/rule-example-1.jpg';\nimport ruleExample2Img from '../images/rule-example-2.jpg';\nimport ruleExample3Img from '../images/rule-example-3.jpg';\nimport ruleExample4Img from '../images/rule-example-4.jpg';\n\nimport useGlobalState from '../useGlobalState';\n\nimport Header from './Header';\nimport { NUMBER_OF_DIGITS, SCREENS } from '../utils/constants';\n\nconst steps = ['Goal', 'Setup', 'Turn', 'Answering', 'Guess', 'End Game'];\n\nconst RuleGoal = ({ ruleSet }) => {\n  const digits = NUMBER_OF_DIGITS[ruleSet];\n\n  const imgSrc = digits === 4 ? ruleGoal4Img : ruleGoal5Img;\n\n  return (\n    <div className=\"rule\">\n      <p>Discover your opponents {digits}-digit code (number, color, position)</p>\n      <div className=\"rule-image\">\n        <img src={imgSrc} alt=\"rule goal\" />\n      </div>\n    </div>\n  );\n};\n\nconst RuleSetup = ({ ruleSet }) => {\n  const digits = NUMBER_OF_DIGITS[ruleSet];\n\n  const imgSrc = digits === 4 ? ruleSetup4Img : ruleSetup5Img;\n\n  return (\n    <div className=\"rule\">\n      <p>Each player will get a set of {digits} numbers. </p>\n      <div className=\"rule-image\">\n        <img src={imgSrc} alt=\"rule setup\" />\n      </div>\n      <p>\n        Each code is always sorted by ascending order with black numbers coming before white\n        numbers.\n        <br />\n        Both 5's in the game are green.\n        <br />\n        Take turns revealing each player code and take note while other players close their eyes.\n      </p>\n      <div className=\"rule-image\">\n        <img src={ruleSetupRevealImg} alt=\"rule setup\" />\n      </div>\n    </div>\n  );\n};\n\nconst RuleTurn = () => {\n  return (\n    <div className=\"rule\">\n      <p>On your turn, you can do one of two options: Ask a question card or Guess the code.</p>\n      <div className=\"rule-image\">\n        <img src={ruleTurnImg} alt=\"rule turn\" />\n      </div>\n    </div>\n  );\n};\n\nconst RuleQuestion = ({ ruleSet }) => {\n  const paragraph = {\n    2: 'Your opponent must answer honestly.',\n    3: 'Both your opponents must answer honestly.',\n    4: 'Everybody (including you) must answer honestly.',\n  };\n\n  return (\n    <div className=\"rule\">\n      <p>Select an available question, ask it and then press confirm.</p>\n      <div className=\"rule-image\">\n        <img src={ruleQuestionImg} alt=\"rule question\" />\n      </div>\n      <p>{paragraph[ruleSet]}</p>\n    </div>\n  );\n};\n\nconst RuleAnswering = () => {\n  return (\n    <div className=\"rule\">\n      <p>Here are some examples of how to answer.</p>\n      <div className=\"rule-image\">\n        <img src={ruleExample1Img} alt=\"rule answer\" />\n      </div>\n      <p>Example 1: \"I have a 5 on C and a 5 on D\"</p>\n      <div className=\"rule-image\">\n        <img src={ruleExample2Img} alt=\"rule answer\" />\n      </div>\n      <p>Example 2: \"I have a 1 on B\" (if asked about number 1)</p>\n      <div className=\"rule-image\">\n        <img src={ruleExample3Img} alt=\"rule answer\" />\n      </div>\n      <p>Example 3: \"A and B have the same color and D and E have the same color\"</p>\n      <div className=\"rule-image\">\n        <img src={ruleExample4Img} alt=\"rule answer\" />\n      </div>\n      <p>Example 4: \"A and B are consecutive and D and E are also consecutive\"</p>\n    </div>\n  );\n};\n\nconst RuleGuess = ({ ruleSet }) => {\n  return (\n    <div className=\"rule\">\n      {ruleSet === 2 ? (\n        <p>\n          Ask your opponent out loud! <br />\n          If you are correct, your opponent has the chance to guess yours as well. If the opponent\n          is also correct, the game ends on a tie, else, you win!\n        </p>\n      ) : (\n        <Fragment>\n          <div className=\"rule-image\">\n            <img src={ruleSet === 3 ? ruleGoal5Img : ruleGoal4Img} alt=\"rule question\" />\n          </div>\n\n          <p>\n            <b>You can only guess once!</b> <br />\n            Announce that you are guessing, write down your guess. Everybody close their eyes and\n            click on the center code to reveal it. After the window auto-closes, announce if you got\n            it right or not. <br />\n            If you got it, everybody else who hasn't had a turn this round can attempt to guess it\n            too. <br />\n            If you got it wrong, sit back and let other players continue the game. <br />\n            You still have to answer any questions, but you are out of the game\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nconst RuleEndGame = ({ ruleSet }) => {\n  return ruleSet === 2 ? (\n    <div className=\"rule\">\n      <p>When one of you tries to guess the code the game ends.</p>\n      <p>\n        The game also ends when there are no question cards left. Each player may try guessing the\n        code now.\n      </p>\n    </div>\n  ) : (\n    <div className=\"rule\">\n      <p>\n        When a player guessed and got the code right, whoever hasn't gone this round yet may make a\n        final guess. Reveal the code and see who wins.\n      </p>\n      <p>\n        The game also ends when there are no question cards left. Everybody can try one time\n        guessing the code if they haven't done so yet.\n      </p>\n    </div>\n  );\n};\n\nconst ruleComponents = (ruleSet) => {\n  console.log(ruleSet);\n  return {\n    Goal: <RuleGoal ruleSet={ruleSet} />,\n    Setup: <RuleSetup ruleSet={ruleSet} />,\n    Turn: <RuleTurn />,\n    Question: <RuleQuestion ruleSet={ruleSet} />,\n    Answering: <RuleAnswering />,\n    Guess: <RuleGuess ruleSet={ruleSet} />,\n    'End Game': <RuleEndGame ruleSet={ruleSet} />,\n  };\n};\n\nconst Rules = () => {\n  // Global States\n  const [game] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n  // Local States\n  const [ruleSet, setRuleSet] = useState(game.playerCount);\n  const [ruleStep, setRuleStep] = useState(0);\n\n  const handleNext = () => {\n    if (ruleStep === steps.length - 1) {\n      setScreen(SCREENS.GAME);\n    } else {\n      setRuleStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setRuleStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setRuleStep(0);\n  };\n\n  const ruleComponent = ruleComponents(ruleSet)[steps[ruleStep]];\n\n  return (\n    <div className=\"rules\">\n      <Header />\n      <div className=\"content\">\n        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n          <Button className=\"btn btn--group\" onClick={() => setRuleSet(2)}>\n            2 Player Rules\n          </Button>\n          <Button className=\"btn btn--group\" onClick={() => setRuleSet(3)}>\n            3 Player Rules\n          </Button>\n          <Button className=\"btn btn--group\" onClick={() => setRuleSet(4)}>\n            4 Player Rules\n          </Button>\n        </ButtonGroup>\n\n        <h1>Rules for {ruleSet} players</h1>\n        <Stepper activeStep={ruleStep} alternativeLabel>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        <div className=\"rule-container\">{ruleComponent}</div>\n        {ruleStep === steps.length ? (\n          <div className=\"action-buttons\">\n            <p>Your done with the rules! Good Luck</p>\n            <Button onClick={handleReset}>Restart</Button>\n          </div>\n        ) : (\n          <div className=\"action-buttons\">\n            <Button\n              variant=\"outlined\"\n              className=\"btn btn--outline\"\n              disabled={ruleStep === 0}\n              onClick={handleBack}\n            >\n              Back\n            </Button>\n            <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleNext}>\n              {ruleStep === steps.length - 1 ? 'Start Game' : 'Next'}\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Rules;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nimport Game from './Game';\nimport Home from './Home';\nimport Rules from './Rules';\n\nconst ScreenComponents = {\n  [SCREENS.GAME]: <Game />,\n  [SCREENS.HOME]: <Home />,\n  [SCREENS.RULES]: <Rules />,\n};\n\nconst App = () => {\n  // Global States\n  const [screen] = useGlobalState('screen');\n\n  return (\n    <Container maxWidth=\"lg\" className=\"app-container\">\n      {ScreenComponents[screen]}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}